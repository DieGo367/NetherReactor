description Adds the Nether Reactor from early MCPE. By DVdo
icon nether_reactor.png
format 71

namespace minecraft
tag function load append nether_reactor:init
tag function tick append nether_reactor:tick

namespace nether_reactor

alias @items @e[type=:item]
alias @item @n[type=:item]
alias @decayer @items[nbt={Item>components>"minecraft:custom_data">"nether_reactor:decay":1b}]

alias @blocks @e[type=:item_display,nbt={data>"nether_reactor:block":1b}]
alias @block  @n[type=:item_display,nbt={data>"nether_reactor:block":1b}]
alias @display @block[distance=..0.01]
alias @hitbox @n[type=:interaction,nbt={data>"nether_reactor:hitbox":1b},distance=..0.01]

alias @reacting @blocks[scores={nether_reactor__step=0..}]
alias @spot @n[type=:marker,nbt={data>"nether_reactor:spot":1b}]

var item_core {
	"minecraft:item_name": "Nether Reactor Core"
	"minecraft:item_model": ~:nether_reactor_core
	"minecraft:max_stack_size": 64
	"!minecraft:max_damage": {}
	"minecraft:custom_data">"nether_reactor:block_id": ~:nether_reactor_core
}
var item_glowing_obsidian {
	"minecraft:item_name": "Glowing Obsidian"
	"minecraft:item_model": ~:glowing_obsidian
	"minecraft:max_stack_size": 64
	"!minecraft:max_damage": {}
	"minecraft:custom_data">"nether_reactor:block_id": ~:glowing_obsidian
	"minecraft:rarity": uncommon
}
loot_table nether_reactor_core {
	type: command
	pools: [{
		rolls: 1
		entries: [{
			type: :item, name: :warped_fungus_on_a_stick
			functions: [{
				function: :set_components
				components: &(item_core)
			}]
		}]
	}]
}
loot_table glowing_obsidian {
	type: command
	pools: [{
		rolls: 1,
		entries: [{
			type: :item, name: :warped_fungus_on_a_stick
			functions: [{
				function: :set_components
				components: &(item_glowing_obsidian)
			}]
		}]
	}]
}
recipe core {
	type: :crafting_shaped
	pattern: [
		idi
		idi
		idi
	]
	key>d: :diamond
	key>i: :iron_ingot
	result>id: :warped_fungus_on_a_stick
	result>components: &(item_core)
}


function init
	&init
	&init nether_reactor__used minecraft.used:minecraft.warped_fungus_on_a_stick
	&init nether_reactor__step
	# settings
	.unless <warn>.loc run <warn>.loc = "actionbar"
	# database
	<blocks>."nether_reactor:nether_reactor_core" = {
		components: &(item_core)
		displayItem: :diamond_ore
		baseBlock: :spawner
		interact: true
	}
	<blocks>."nether_reactor:glowing_obsidian" = {
		components: &(item_glowing_obsidian)
		displayItem: :crying_obsidian
		baseBlock: :crying_obsidian
	}

function tick
	# place blocks
	.from @a[scores={nether_reactor__used=1..}]
		player/place_check()
		@s#nether_reactor__used = 0
	
	# standard block behavior
	.from @blocks run block/tick()

	# core tick update
	.from @reacting positioned ~ ~-0.5 ~ run core/reaction()

	# infinite night
	.if <night>.enabled run infinite_night()

function message(<warn>.msg)
	.if <warn>.{loc:"actionbar"} run title @p actionbar {storage: ~:warn, nbt: msg, interpret: true}
	.if <warn>.{loc:"title"} run title @p title {storage: ~:warn, nbt: msg, interpret: true}
	.if <warn>.{loc:"chat"} run tellraw @p {storage: ~:warn, nbt: msg, interpret: true}

tag item tools append #:axes #:hoes #:pickaxes #:shovels #:swords :trident
predicate player/mainhand_has_use {
	# if any of the sub terms match, the item is considered useless, so it can not be useful
	condition: inverted
	term: {
		condition: any_of
		terms: [
			{
				condition: entity_properties
				entity: this
				predicate>equipment>mainhand>items: #~:tools
			}
			{
				condition: entity_properties
				entity: this
				predicate>equipment>mainhand>count: 0
			}
		]
	}
}
predicate player/holding_shift {
	condition: entity_properties
	entity: this
	predicate>type_specific: {
		type: player
		input>sneak: true
	}
}
function player/place_check
	<item>.mainhand = @s.SelectedItem.components."minecraft:custom_data"."nether_reactor:block_id"
	.unless <item>.mainhand unless ~:player/mainhand_has_use?
		<item>.offhand = @s.equipment.offhand.components."minecraft:custom_data"."nether_reactor:block_id"

	.if <item>.mainhand run <item>.used = <item>.mainhand
	.if <item>.offhand  run <item>.used = <item>.offhand
	.if <item>.used run player/place_trace()

	&del <item>.mainhand
	&del <item>.offhand
	&del <item>.used
tag entity_type raytrace_ignores append :item :experience_orb :interaction :item_display :block_display :text_display
function player/place_trace
	raytrace = 500
	tag @s add nether_reactor__raytracer
	placed ?= .anchored eyes =>
		raytrace--
		.if raytrace <= 0
			return fail
		.pos ~-0.001 ~-0.001 ~-0.001 as @e[dx=0,dy=0,dz=0, type=!#~:raytrace_ignores, tag=!nether_reactor__raytracer]
			.pos ~-0.998 ~-0.998 ~-0.998 if @s[dx=0,dy=0,dz=0]
				return fail
		.if ^ ^ ^0.01 #:replaceable positioned ^ ^ ^0.01
			return run &recurse
		.align xyz if @e[dx=0,dy=0,dz=0, type=!#~:raytrace_ignores]
			return fail
		block/place(<item>.used)
		return 1
	tag @s remove nether_reactor__raytracer
	.if placed = true unless @s[gamemode=creative]
		.if <item>.mainhand run item modify entity @s weapon.mainhand {function: :set_count, count: -1, add: true}
		.if <item>.offhand  run item modify entity @s weapon.offhand  {function: :set_count, count: -1, add: true}
function player/sees_block
	&alias @b @block[tag=nether_reactor__track]
	# at tagged block
	.facing @s eyes pos ^ ^ ^1
		.rotated @s pos ^ ^ ^1
			.if @b[distance=..0.7] =>
				raytrace = 500
				.at @s anchored eyes =>
					raytrace--
					.if raytrace <= 0
						return fail
					.if ^ ^ ^0.01 #:replaceable positioned ^ ^ ^0.01
						return run &recurse
					.pos ^ ^ ^0.01 align xyz pos ~0.5 ~0.5 ~0.5 if @b[distance=..0.01]
						seen = true


function block/place(<place>.block.id)
	<place>.block $=> $data modify storage ~:place block set from storage ~:blocks $(id)
	.align xyz pos ~0.5 ~0.5 ~0.5 summon :item_display =>
		@s.data."nether_reactor:block" = true
		@s.item.id = <place>.block.displayItem
		@s.item.components = <place>.block.components
		@s.transformation.scale = [1.001f, 1.001f, 1.001f]
		<place>.block $=> $setblock ~~~ $(baseBlock)
		.if <place>.block.interact
			@s.data."nether_reactor:interact" = true
			block/summon_interact()
	&del <place>.block
function block/tick
	.if ~~~ #:air
		block/broken()
		.if @s.data."nether_reactor:interact" pos ~ ~-0.501 ~ run kill @hitbox
		kill @s
		return fail
	.if @s.data."nether_reactor:interact" pos ~ ~-0.501 ~
		block/tick_interact()
function block/summon_interact
	.at @s run summon :interaction ~ ~-0.501 ~ {
		data>"nether_reactor:hitbox": true
		width: 1.002f
		height: 1.002f
		response: true
	}
function block/tick_interact
	# check if we need to hide the interact
	tag @s add nether_reactor__track
	seen = false
	.at @s as @a[distance=..7] if ~:player/holding_shift? run player/sees_block()
	.if seen = false if @s.data."nether_reactor:mined" at @s as @a[distance=..7] unless ~:player/holding_shift? run player/sees_block()
	tag @s remove nether_reactor__track

	.if seen = true run kill @hitbox
	.if seen = false
		.unless @hitbox run block/summon_interact()
		&del @s.data."nether_reactor:mined"

	.as @hitbox
		.if @s.interaction
			.pos ~ ~0.501 ~ from @display run block/interacted()
			&del @s.interaction
		.if @s.attack
			.on attacker if @s[gamemode=creative] pos ~ ~0.501 ~
				setblock ~~~ :air
				kill @display
			.on attacker unless @s[gamemode=creative] pos ~ ~0.501 ~
				@display.data."nether_reactor:mined" = true
			kill @s
function block/broken
	.align xyz
		xpKill := kill @e[type=:experience_orb,dx=0,dy=0,dz=0]
		itemKill := kill @e[type=:item,dx=0,dy=0,dz=0]
	itemKill += xpKill
	.if itemKill > 0
		<drop>.id = @s.item.components."minecraft:custom_data"."nether_reactor:block_id"
		<drop> $=> $loot spawn ~~~ loot $(id)
	
	.if @s[nbt={item>components>"minecraft:custom_data">"nether_reactor:block_id":~:nether_reactor_core}]
		core/break()
function block/interacted
	.if @s[nbt={item>components>"minecraft:custom_data">"nether_reactor:block_id":~:nether_reactor_core}]
		core/activation_check()
function block/remove()
	setblock ~~~ :air
	.align xyz
		.pos ~0.5 ~0.5 ~0.5 run kill @display
		.pos ~0.5 ~-0.001 ~0.5 run kill @hitbox

function is_void
	.if ~~~ :air run return fail
	.unless ~~~ :air run return fail
	return 1

function core/activation_check
	.pos ~ ~-8 ~ if is_void() run return run =>
		message("The Nether reactor needs to be built higher up.")
	.pos ~ ~33 ~ if is_void() run return run =>
		message("The Nether reactor needs to be built lower down.")
	.unless core/structure_check() run return run =>
		message("Not the correct pattern!")
	core/start()
tag block reactor_base append :cobblestone :cobbled_deepslate :blackstone
function core/structure_check
	# 4 gold corners
	&for X in [-1,1]
		&for Z in [-1,1]
			.unless ~&(X) ~-1 ~&(Z) :gold_block run return fail
	# cobblestone plus (top and bottom)
	&for Y in [-1,1]
		.unless ~ ~&(Y) ~ #~:reactor_base run return fail
		&for V in [-1,1]
			.unless ~&(V) ~&(Y) ~ #~:reactor_base run return fail
			.unless ~ ~&(Y) ~&(V) #~:reactor_base run return fail
	# 4 cobblestone corners
	&for X in [-1,1]
		&for Z in [-1,1]
			.unless ~&(X) ~ ~&(Z) #~:reactor_base run return fail
	# 4 air sides
	&for V in [-1,1]
		.unless ~&(V) ~ ~ #:air run return fail
		.unless ~ ~ ~&(V) #:air run return fail
	# 4 air corners
	&for X in [-1,1]
		&for Z in [-1,1]
			.unless ~&(X) ~1 ~&(Z) #:air run return fail
	return 1
function core/start
	@s.item.components."minecraft:custom_model_data".strings = ["active"]
	message({text: "Active!", color: yellow})

	&del @s.data."nether_reactor:interact"
	.pos ~ ~-0.501 ~ run kill @hitbox

	&init %bossbar {text: "Nether Reactor"}
	%bossbar%color = "blue"
	%bossbar%max = 920
	%bossbar = 0

	@s#nether_reactor__step = 0
	<night>.enabled = 1
	spire()
function core/reaction
	@s#nether_reactor__step ++
	%bossbar = @s#nether_reactor__step
	# within the main room
	.positioned ~-7.5 ~-1 ~-7.5
		%bossbar%players = @a[dx=14,dy=3,dz=14]
		.from @e[type=:zombified_piglin,dx=14,dy=3,dz=14] run anger()

	# Reaction steps

	# glowing obsidian replacing cobblestone
	.if @s#nether_reactor__step == 40 =>
		&for X in [-1,0,1] run .positioned ~&(X) ~-1 ~ run block/place(~:glowing_obsidian)
		&for Z in [-1,1] run .positioned ~ ~-1 ~&(Z) run block/place(~:glowing_obsidian)
	.if @s#nether_reactor__step == 60 =>
		&for X in [-1,1]
			&for Z in [-1,1]
				.positioned ~&(X) ~ ~&(Z) run block/place(~:glowing_obsidian)
	.if @s#nether_reactor__step == 80 =>
		&for X in [-1,0,1] run .positioned ~&(X) ~1 ~ run block/place(~:glowing_obsidian)
		&for Z in [-1,1] run .positioned ~ ~1 ~&(Z) run block/place(~:glowing_obsidian)
	# gold is replaced
	.if @s#nether_reactor__step == 140 =>
		&for X in [-1,1]
			&for Z in [-1,1]
				.positioned ~&(X) ~-1 ~&(Z) run block/place(~:glowing_obsidian)
	# item and mob spawns
	.if @s#nether_reactor__step == 200 =>
		%bossbar%color = "red"
		core/spawn_items(15)
		core/spawn_mobs(2)
	.if @s#nether_reactor__step == 260 =>
		core/spawn_items(15)
		core/spawn_mobs(2)
	.if @s#nether_reactor__step == 400 =>
		core/spawn_items(15)
		core/spawn_mobs(2)
	.if @s#nether_reactor__step == 440 =>
		drops := random value  0..35
		core/spawn_items(drops)
		core/spawn_mobs(1)
	.if @s#nether_reactor__step == 500 =>
		drops := random value  0..40
		core/spawn_items(drops)
		core/spawn_mobs(1)
	.if @s#nether_reactor__step == 600 =>
		drops := random value  0..32
		core/spawn_items(drops)
	.if @s#nether_reactor__step == 680 =>
		drops := random value  0..20
		core/spawn_items(drops)
	.if @s#nether_reactor__step == 720 =>
		drops := random value  0..24
		core/spawn_items(drops)
	.if @s#nether_reactor__step == 760 =>
		drops := random value  0..36
		core/spawn_items(drops)
	.if @s#nether_reactor__step == 800 =>
		drops := random value  0..20
		core/spawn_items(drops)
	# burning out of obsidian
	.if @s#nether_reactor__step == 860 =>
		%bossbar%color = "purple"
		&var Y 1.5
		&for X in [-1,0,1] for Z in [-1,0,1] run .pos ~&(X) ~&(Y) ~&(Z) run block/remove()
		fill ~-1 ~1 ~-1 ~1 ~1 ~1 :obsidian
	.if @s#nether_reactor__step == 880 =>
		&var Y 0.5
		&for X in [-1,0,1] for Z in [-1,1] run .pos ~&(X) ~&(Y) ~&(Z) run block/remove()
		&for X in [0] for Z in [-1,1] run .pos ~&(X) ~&(Y) ~&(Z) run block/remove()
		fill ~1 ~ ~1 ~1 ~ ~-1 :obsidian
		fill ~-1 ~ ~1 ~-1 ~ ~-1 :obsidian
		setblock ~ ~ ~1 :obsidian
		setblock ~ ~ ~-1 :obsidian
	.if @s#nether_reactor__step == 900 =>
		&var Y -0.5
		&for X in [-1,0,1] for Z in [-1,0,1] run .pos ~&(X) ~&(Y) ~&(Z) run block/remove()
		fill ~-1 ~-1 ~-1 ~1 ~-1 ~1 :obsidian
	# end of reaction
	.if @s#nether_reactor__step >= 920 run core/end()
function core/end
	&del @s#nether_reactor__step
	@s.item.components."minecraft:custom_model_data".strings = [dead]
	&del %bossbar%players
	.unless @reacting
		&del %bossbar
		remove_infinite_night()
	# structure changes
	fill ~-1 ~1 ~-1 ~1 ~1 ~1 :obsidian
	fill ~1 ~ ~1 ~1 ~ ~-1 :obsidian
	fill ~-1 ~ ~1 ~-1 ~ ~-1 :obsidian
	setblock ~ ~ ~1 :obsidian
	setblock ~ ~ ~-1 :obsidian
	fill ~-1 ~-1 ~-1 ~1 ~-1 ~1 :obsidian
	decay_spire()
function core/break
	&del %bossbar%players
# Reaction functions
function core/spawn_items(drops)
	.if drops <= 0 run return 1
	core/random_spot()
	.at @spot run loot spawn ~~~ loot ~:rewards
	kill @spot
	drops--
	.if drops > 0 run &recurse
function core/spawn_mobs(mobCap)
	mobCount = 0
	.positioned ~-7.5 ~-1 ~-7.5
		.as @e[type=:zombified_piglin,dx=14,dy=3,dz=14] run mobCount++
	.if mobCount < 3 =>
		core/spawn_mob()
		mobCount ++
		mobCap --
		.if mobCount < 3 if mobCap > 0 run &recurse
function core/spawn_mob
	core/random_spot()
	.at @spot run summon :zombified_piglin ~~~
	kill @spot
function core/random_spot
	# distance of 3 - 7 blocks, 0.5 steps
	distance := random value 6..14
	distance ++
	# angle up to 360 degrees, 5 deg steps
	angle := random value 1..72

	.positioned ~ ~-1 ~ rotated 0 0 =>
		angle --
		.if angle == 0 =>
			distance --
			.if distance == 0
				summon :marker ~~~ {data>"nether_reactor:spot": true}
			.if distance > 0
				.positioned ^ ^ ^0.5 run &recurse
		.if angle > 0
			.rotated ~5 0 run &recurse

	&del distance
	&del angle
loot_table rewards {
	type: command
	pools: [{
		rolls: 1
		entries: [
			{type: :item, name: :red_mushroom, weight: 1}
			{type: :item, name: :brown_mushroom, weight: 1}
			{type: :item, name: :cactus, weight: 1}
			{
				type: :item, weight: 1
				name: :quartz
				functions: [
					{function: :set_count, count: 4}
				]
			}
			{type: :item, name: :sugar_cane, weight: 1}
			{
				type: :item, weight: 1
				name: :glowstone_dust
				functions: [
					{function: :set_count, count: 3}
				]
			}
			{type: :item, name: :pumpkin_seeds, weight: 1}
			{type: :item, name: :melon_seeds, weight: 1}
		]
	}]
}


# as pigman in main spire room during reaction
function anger
	.unless @s.AngryAt
		.if @p[distance=..4,gamemode=!creative,gamemode=!spectator]
			@s.AngerTime = 50
			@s.AngryAt = @p[distance=..4,gamemode=!creative,gamemode=!spectator].UUID

import structure nether_spire from "nether_spire.nbt"
function spire
	setblock ~ ~-3 ~ :structure_block{mode:LOAD, powered:false, name:~:nether_spire, posX:-8, posY:0, posZ:-8}
	setblock ~ ~-2 ~ :redstone_block

function decay_spire
	# outer wall
	&for Y in -1..5
		.pos ~-8 ~&(Y) ~-8 run decay()
	&for I in -7..8
		&var H (I+1)/2 + 9
		&for Y in -1..H
			.pos ~&(I) ~&(Y) ~-8 run decay()
			.pos ~-8 ~&(Y) ~&(I) run decay()
	&for I in -7..7
		&var H I/2 + 17
		&for Y in -1..H
			.pos ~&(I) ~&(Y) ~8 run decay()
			.pos ~8 ~&(Y) ~&(I) run decay()
	&for Y in -1..20
		.pos ~8 ~&(Y) ~8 run decay()

	# middle wall
	&for Y in 5..22
		.pos ~-5 ~&(Y) ~-5 run decay()
	&for I in -4..5
		&var H 20 - I/2
		&for Y in 5..H
			.pos ~&(I) ~&(Y) ~-5 run decay()
			.pos ~-5 ~&(Y) ~&(I) run decay()
	&for I in -4..0
		&var H 16 - (I+1)/2
		&for Y in 5..H
			.pos ~&(I) ~&(Y) ~5 run decay()
			.pos ~5 ~&(Y) ~&(I) run decay()
	&for I in 1..4
		&var H 15 + (I+1)/2
		&for Y in 5..H
			.pos ~&(I) ~&(Y) ~5 run decay()
			.pos ~5 ~&(Y) ~&(I) run decay()
	&for Y in 5..18
		.pos ~5 ~&(Y) ~5 run decay()

	# inner wall
	&for Y in 11..25
		.pos ~-3 ~&(Y) ~-3 run decay()
	&for I in -2..3
		&var H I/2 + 27
		&for Y in 11..H
			.pos ~&(I) ~&(Y) ~-3 run decay()
			.pos ~-3 ~&(Y) ~&(I) run decay()
	&for I in -2..2
		&var H (I+1)/2 + 29
		&for Y in 11..H
			.pos ~&(I) ~&(Y) ~3 run decay()
			.pos ~3 ~&(Y) ~&(I) run decay()
	&for Y in 11..30
		.pos ~3 ~&(Y) ~3 run decay()
function decay
	rng := random value 0..3
	.if rng = 0 run setblock ~~~ :air

function infinite_night
	daytime := time query daytime
	.if daytime >= 18000 if daytime < 18150 =>
		.unless <night>.hadCycle
			<night>.hadCycle := gamerule doDaylightCycle
		gamerule doDaylightCycle false
	.if daytime < 18000 run time add 100
	.if daytime >= 18150 run time add 100
function remove_infinite_night
	.if <night>.{hadCycle:1}
		gamerule doDaylightCycle true
	&del <night>.hadCycle
	&del <night>.enabled