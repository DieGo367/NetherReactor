description In-game splits for the Nether Reactor Core Challenge!
icon speedrun.png
format 71

namespace minecraft
tag function load append nrcc:load
tag function tick append nrcc:tick

namespace nrcc

alias @runner @a[tag=Runner]

alias @blocks @e[type=:item_display,nbt={data>"nether_reactor:block":1b}]

var Dimensions [
	{id: :overworld,  name: "The Overworld", color: green}
	{id: :the_nether, name: "The Nether",    color: red}
	{id: :the_end,    name: "The End",       color: dark_purple}
]

function load
	&init
	scoreboard objectives remove nrcc__splits
	&init nrcc__splits
	&init nrcc__health health
	# scoreboard objectives setdisplay sidebar nrcc__splits

	tag @a remove Runner

	# UI
	tellraw @a {
		text: "[Start]"
		color: green
		click_event: {
			action: "run_command"
			command: "/function nrcc:start"
		}
		hover_event: {
			action: show_text
			value: "Click to start the run!"
		}
	}

function tick
	.from @runner =>
		# Increase timer
		Time#nrcc__splits ++

		# Countdown titles
		.if Time#nrcc__splits == -60 run title @s title {text: "3"}
		.if Time#nrcc__splits == -40 run title @s title {text: "2"}
		.if Time#nrcc__splits == -20 run title @s title {text: "1"}
		.if Time#nrcc__splits == 0 run title @s title {text: "GO!",color: gold}

		# in run
		.if Time#nrcc__splits >= 0 =>
			# print timer
			print_time(Time#nrcc__splits, "actionbar")

			# Dimension check
			check_dim()
			.if <dimension>.{changed: 1} =>
				&for dim in Dimensions
					.if <dimension>.{current: &(dim.id)}
						<time_printer>.PreMsg = {text: &(dim.name), color: &(dim.color)}
				.unless <dimension>.current run <time_printer>.PreMsg = {text: "Custom Dimension", color: gray}
				split()
			&del Temp

			# Item check
			.unless <progress>.hasCore
				.if @s[nbt={Inventory:[
					{components>"minecraft:custom_data">"nether_reactor:block_id": nether_reactor:nether_reactor_core}
				]}] =>
					<time_printer>.PreMsg = {text: "Core get"}
					split()
					<progress>.hasCore = true

			# Activation check
			.unless <progress>.activated
				.if @blocks[scores={nether_reactor__step=0..}] =>
					<time_printer>.PreMsg = {text: "Activated"}
					split()
					<progress>.activated = true

			# Death check
			.if <progress>.activated if @s#nrcc__health == 0 =>
				title @s title {text: "You failed...", color: red}
				<time_printer>.PreMsg = {text: "Failed", color: red}
				print_time(Time#nrcc__splits, "chat")
				stop()

			# Finish check
			.if @blocks[nbt={item>components>"minecraft:custom_model_data">strings:[dead]}] =>
				title @s title {text: "Time!", color: "gold"}
				<time_printer>.PreMsg = {"text": "Time!", color: gold}
				print_time(Time#nrcc__splits, "chat")
				stop()

function start
	tag @a remove Runner
	tag @s add Runner

	effect give @s :slowness 3 255
	effect give @s :mining_fatigue 3 255
	
	scoreboard objectives remove nrcc__splits
	&init nrcc__splits
	# scoreboard objectives setdisplay sidebar nrcc__splits
	Time#nrcc__splits = -61
	SplitCount = 0
	check_dim()
	&del <progress>.hasCore
	&del <progress>.activated
	<nether_reactor:warn>.loc = "chat"

function stop
	tag @a remove Runner
	<nether_reactor:warn>.loc = "actionbar"

function check_dim
	<dimension>.previous = <dimension>.current
	&del <dimension>.current
	&for dim in Dimensions
		.if in &(dim.id) as @s[distance=..0] run <dimension>.current = &(dim.id)
	<dimension>.temp = <dimension>.previous
	<dimension>.changed ?= <dimension>.temp = <dimension>.current
	&del <dimension>.temp

function split
	SplitCount ++
	&for N in 0..1000
		.if SplitCount == &(N)
			scoreboard players operation &(N): nrcc__splits = Time nrcc__splits
	print_time(Time#nrcc__splits, "chat")

function calc_time(Value)
	# Get minutes
	Minutes = Value
	Scalar = 1200
	Minutes /= Scalar
	Subtractor = Minutes
	Subtractor *= Scalar
	Value -= Subtractor
	# Get seconds
	Seconds = Value
	Scalar = 20
	Seconds /= Scalar
	Subtractor = Seconds
	Subtractor *= Scalar
	Value -= Subtractor
	# Get sub seconds
	Scalar = 5
	Value *= Scalar
	# cleanup
	&del Scalar
	&del Subtractor

function print_time(Value, <time_printer>.loc)
	calc_time(Value)

	# update suffixes
	.if Seconds < 10 run <time_printer>.SecMark = ":0"
	.unless Seconds < 10 run <time_printer>.SecMark = ":"
	.if Value < 10 run <time_printer>.SubSecMark = ":0"
	.unless Value < 10 run <time_printer>.SubSecMark = ":"
	.if <time_printer>.PreMsg run <time_printer>.PreMsgMark = ": "
	.unless <time_printer>.PreMsg
		<time_printer>.PreMsgMark = ""
		<time_printer>.PreMsg = ""

	&var timeText {
		text: "",
		color: aqua,
		extra: [
			{storage: ~:time_printer, nbt: "PreMsg", interpret: true},
			{storage: ~:time_printer, nbt: "PreMsgMark"},
			{score: {
				name: "Minutes",
				objective: "nrcc"
			}},
			{storage: ~:time_printer, nbt: "SecMark"},
			{score: {
				name: "Seconds",
				objective: "nrcc"
			}},
			{storage: ~:time_printer, nbt: "SubSecMark"},
			{score: {
				name: "Value",
				objective: "nrcc"
			}}
		]
	}

	# print
	.if <time_printer>.{loc: "actionbar"} run title @s actionbar &(timeText)
	.if <time_printer>.{loc: "title"} run title @s title &(timeText)
	.if <time_printer>.{loc: "chat"} run tellraw @s &(timeText)

	# cleanup
	&del <time_printer>.PreMsg